# Send a ping to all peers after ping_interval seconds
self_hostname: &self_hostname "localhost"
inbound_rate_limit_percent: 100
outbound_rate_limit_percent: 30
swap_endpoint:  'https://rpc.goerli.mudit.blog'
bee_swarm_key_path: "./keys/swarm.key"
network_overrides: &network_overrides
  constants:
    mainnet:
      NETWORK_TYPE: 0
      CONTRACT: ""
      BLOCKHEIGHT: 5298700
    testnet0:
      NETWORK_TYPE: 1
      CONTRACT: "0x30d9ED9054681c56BF3cff638b4F3109ed06339A"
      BLOCKHEIGHT: 5310627
  config:
    mainnet:
      address_prefix: "nbzz"
    testnet0:
      address_prefix: "gnbzz"

selected_network: &selected_network "testnet0"

# public ssl ca is included in source code
# Private ssl ca is used for trusted connections between machines user owns
private_ssl_ca:
  crt: "config/ssl/ca/private_ca.crt"
  key: "config/ssl/ca/private_ca.key"

nbzz_ssl_ca:
  crt: "config/ssl/ca/nbzz_ca.crt"
  key: "config/ssl/ca/nbzz_ca.key"


daemon_ssl:
  private_crt: "config/ssl/daemon/private_daemon.crt"
  private_key: "config/ssl/daemon/private_daemon.key"


# Controls logging of all servers (harvester, farmer, etc..). Each one can be overriden.
logging: &logging
  log_stdout: False  # If True, outputs to stdout instead of a file
  log_filename: "log/debug.log"
  log_level: "WARNING"  # Can be CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
  log_maxfilesrotation: 7 #  Max files in rotation. Default value 7 if the key is not set
  log_syslog: False  # If True, outputs to SysLog host and port specified
  log_syslog_host: "localhost"  # Send logging messages to a remote or local Unix syslog
  log_syslog_port: 514  # UDP port of the remote or local Unix syslog


  ssl:
    private_crt:  "config/ssl/farmer/private_farmer.crt"
    private_key:  "config/ssl/farmer/private_farmer.key"
    public_crt:  "config/ssl/farmer/public_farmer.crt"
    public_key:  "config/ssl/farmer/public_farmer.key"


full_node:
  # The full node server (if run) will run on this port
  port: 8444

  # Run multiple nodes with different databases by changing the database_path
  database_path: db/blockchain_v1_CHALLENGE.sqlite
  peer_db_path: db/peer_table_node.sqlite
  simulator_database_path: sim_db/simulator_blockchain_v1_CHALLENGE.sqlite
  simulator_peer_db_path: sim_db/peer_table_node.sqlite

  # If True, starts an RPC server at the following port
  start_rpc_server: True
  rpc_port: 8555

  # Use UPnP to attempt to allow other full nodes to reach your node behind a gateway
  enable_upnp: True

  # If node is more than these blocks behind, will do a sync (long sync)
  sync_blocks_behind_threshold: 300

  # If node is more than these blocks behind, will do a short batch-sync, if it's less, will do a backtrack sync
  short_sync_blocks_behind_threshold: 20

  # How often to initiate outbound connections to other full nodes.
  peer_connect_interval: 30
  # Accept peers until this number of connections
  target_peer_count: 80
  # Initiate outbound connections until this number is hit.
  target_outbound_peer_count: 8
  # IPv4/IPv6 network addresses and CIDR blocks allowed to connect even when target_peer_count has been hit.
  # exempt_peer_networks: ["192.168.0.3", "192.168.1.0/24", "fe80::/10", "2606:4700:4700::64/128"]
  exempt_peer_networks: []
  # Accept at most # of inbound connections for different node types.
  max_inbound_wallet: 20
  max_inbound_farmer: 10
  max_inbound_timelord: 5
  # Only connect to peers who we have heard about in the last recent_peer_threshold seconds
  recent_peer_threshold: 6000

  # Send to a Bluebox (sanatizing timelord) uncompact blocks once every
  # 'send_uncompact_interval' seconds. Set to 0 if you don't use this feature.
  send_uncompact_interval: 0
  # At every 'send_uncompact_interval' seconds, send blueboxes 'target_uncompact_proofs' proofs to be normalized.
  target_uncompact_proofs: 100
  # Setting this flag as True, blueboxes will sanitize only data needed in weight proof calculation, as opposed to whole blocks.
  # Default is set to False, as the network needs only one or two blueboxes like this.
  sanitize_weight_proof_only: False
  # timeout for weight proof request
  weight_proof_timeout: 360

  # when enabled, the full node will print a pstats profile to the root_dir/profile every second
  # analyze with nbzz/utils/profiler.py
  enable_profiler: False

  # List of trusted DNS seeders to bootstrap from.
  # If you modify this, please change the hardcode as well from FullNode.set_server()
  dns_servers:
    - "dns-introducer.nbzz.net"
  farmer_peer:
      host: *self_hostname
      port: 8447
  timelord_peer:
      host: *self_hostname
      port: 8446
  introducer_peer:
      host: introducer.nbzz.net  # Nbzz AWS introducer IPv4/IPv6
      port: 8444
  wallet_peer:
    host: *self_hostname
    port: 8449
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  ssl:
    private_crt:  "config/ssl/full_node/private_full_node.crt"
    private_key:  "config/ssl/full_node/private_full_node.key"
    public_crt:  "config/ssl/full_node/public_full_node.crt"
    public_key:  "config/ssl/full_node/public_full_node.key"

introducer:
  host: *self_hostname
  port: 8445
  max_peers_to_send: 20
  # The introducer will only return peers who it has seen in the last
  # recent_peer_threshold seconds
  recent_peer_threshold: 6000
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  ssl:
    public_crt:  "config/ssl/full_node/public_full_node.crt"
    public_key:  "config/ssl/full_node/public_full_node.key"

wallet:
  port: 8449
  rpc_port: 9256

  enable_profiler: False

  # The minimum height that we care about for our transactions. Set to zero
  # If we are restoring from private key and don't know the height.
  starting_height: 0
  start_height_buffer: 100  # Wallet will stop fly sync at starting_height - buffer
  num_sync_batches: 50
  initial_num_public_keys: 100
  initial_num_public_keys_new_wallet: 5

  full_node_peer:
    host: *self_hostname
    port: 8444

  testing: False
  database_path: wallet/db/blockchain_wallet_v1_CHALLENGE_KEY.sqlite
  wallet_peers_path: wallet/db/wallet_peers.sqlite

  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  target_peer_count: 5
  peer_connect_interval: 60
  # The introducer will only return peers who it has seen in the last
  # recent_peer_threshold seconds
  recent_peer_threshold: 6000

  introducer_peer:
    host: introducer.nbzz.net # Nbzz AWS introducer IPv4/IPv6
    port: 8444

  ssl:
    private_crt:  "config/ssl/wallet/private_wallet.crt"
    private_key:  "config/ssl/wallet/private_wallet.key"
    public_crt:  "config/ssl/wallet/public_wallet.crt"
    public_key:  "config/ssl/wallet/public_wallet.key"

  trusted_peers:
    trusted_node_1: "config/ssl/full_node/public_full_node.crt"

  short_sync_blocks_behind_threshold: 20
